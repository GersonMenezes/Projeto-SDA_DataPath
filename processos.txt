P1: process
begin

   control <= "00000000000000000000100000000";
   data_in <= x"01";
   
   wait for 20 ns;
   
   control <= "00000000010000000001000000000";
   data_in <= x"02";
   
   wait for 20 ns;
   
   control <= "00000000100000000010000000000";
   data_in <= x"03";
   
   wait for 20 ns;
   
   control <= "00000000011000000100000000000";
   data_in <= x"04";

   wait for 20 ns;
   
   control <= "00000001000000001000000000000";
   data_in <= x"05";

   wait for 20 ns;
   
   control <= "00000001010000010000000000000";
   data_in <= x"06";

   wait for 20 ns;
   
   control <= "00000001100000100000000000000";
   data_in <= x"07";
   
   wait for 20 ns;
   
   control <= "00000001110001000000000000000";
   data_in <= x"08";

   wait for 20 ns;
   
   control <= "00100100110000000000100000001";
   data_in <= x"08";

   wait for 20 ns;
   
   control <= "00000000000000000000100000001";
   data_in <= x"08";

   wait;


end process;



P2: process
--arquivo de entrada--
file fileType : text;
variable inType : std_logic_vector(28 downto 0);
variable str_type : string(29 downto 1);
variable lineType : line;
--arquivo de saida--
file outfile : text;
variable out1 : std_logic_vector(28 downto 0);
variable str_out1 : string(29 downto 1);
variable outline : line;



begin

FILE_OPEN(fileType,"entrada.txt",READ_MODE);
FILE_OPEN(outfile,"saida.txt",WRITE_MODE);

  WHILE NOT ENDFILE(fileType) LOOP
		
			
		readline(fileType,lineType);
		read(lineType,str_type);
		inType := str_to_stdvec(str_type);
		
		control <= inType;
		
   	WAIT for 20 ns;
		
		out1 := data_out;
		str_out1 := stdvec_to_str(out1);
		write(outline,str_out1);
		writeline(outfile,outline);
		

	END LOOP;
	
	wait;

end process;


0000000001000000000100000000000000000
0000000010000000001000000000000000010
0000000001100000010000000000000000010
0000000100000000100000000000000000100
0000000101000001000000000000011111111
0000000110000010000000000000011111111
0000000111000100000000000000011111111
0010010011000000000010000000111111111
0000000000000000000010000000111111111


00000000
00000001
00000010
00000100
00000101
00000010
00000100
00000101

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use STD.textio.all;
USE IEEE.NUMERIC_STD.ALL;

entity DataPath_n_TB is
end DataPath_n_TB;

architecture rtl of DataPath_n_TB is

component DataPath

port(
		data_in : in std_logic_vector(7 downto 0);
		clock : in std_logic;
		reset : in std_logic;
		control : in std_logic_vector(28 downto 0);
		data_out : out std_logic_vector(7 downto 0);
		cout,ov,N,Z : out std_logic);
end component;

signal data_in : std_logic_vector(7 downto 0);
signal clock : std_logic;
signal reset :  std_logic;
signal control : std_logic_vector(28 downto 0);
signal data_out :  std_logic_vector(7 downto 0);
signal cout,ov,N,Z : std_logic;
signal read_enable : std_logic := '0';



    
----------------------------------------------------------------------------
----------------------------------------------------------------------------

-- Funcao de String para STD_LOGIC_VECTOR:
function str_to_stdvec(inp: string) return std_logic_vector is
	variable temp: std_logic_vector(inp'range);
	begin
		for i in inp'range loop
			if (inp(i) = '1') then
					temp(i):= '1';
			elsif(inp(i)='0') then
		      temp(i):= '0';
			end if;
		end loop;
		return temp; 
end function str_to_stdvec;

-- Funcao de STD_LOGIC_VECTOR para string:
function stdvec_to_str(inp: std_logic_vector) return string is
	variable temp: string(inp'left+1 downto 1);
	begin
		for i in inp'reverse_range loop
			if (inp(i) = '1') then
					temp(i+1):= '1';
			elsif(inp(i)='0') then
					temp(i+1):= '0';
			end if;
		end loop;
		return temp; 
end function stdvec_to_str;
----------------------------------------------------------------------------
begin
  UUT: DataPath port map(
    data_in => data_in,
    clock => clock,
    reset => reset,
    control => control,
    data_out => data_out,
    cout => cout,
    ov => ov,
    N => N,
    Z => Z
  );
  
--UUT: DataPath port map(data_in, clock, reset, control, data_out, cout, ov, N, Z);
  
reset <=  '0';

P0:process
begin
  clock <= '0','1' after 10 ns; -- repete quando acaba process
  wait for 20 ns;
end process;

P2: process
--arquivo de entrada--
file fileType : text;
variable inType : std_logic_vector(28 downto 0);
variable str_type : string(29 downto 1);
variable inType_data : std_logic_vector(7 downto 0);
variable str_type_data : string(8 downto 1);
variable lineType : line;
--arquivo de saida--
file outfile : text;
variable out1 : std_logic_vector(7 downto 0);
variable str_out1 : string(8 downto 1);
variable outline : line;

begin

FILE_OPEN(fileType,"entrada.txt",READ_MODE);
FILE_OPEN(outfile,"saida.txt",WRITE_MODE);

  WHILE NOT ENDFILE(fileType) LOOP
		if rising_edge(clock) then
	
		readline(fileType,lineType);
		
		-- Controle e Entrada
		read(lineType,str_type);
		inType := str_to_stdvec(str_type);
		read(lineType, str_type_data);
		inType_data := str_to_stdvec(str_type_data);

     		data_in <= inType_data;
      		control <= inType;
  		
		out1 := data_out;
		str_out1 := stdvec_to_str(out1);
		write(outline,str_out1);
		writeline(outfile,outline);

		end if;

	END LOOP;
	
	wait;

end process;


end rtl;